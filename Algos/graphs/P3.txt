class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        
        queue<tuple<int,int,int>> q;
        int tm;
        int rows = grid.size(),cols = grid[0].size();
        vector<vector<int>> vis(rows,vector<int>(cols,0));
        bool is_fresh=false;
        for(int i=0;i<rows;i++){
            for(int j=0;j<cols;j++){
                if(grid[i][j]==1){
                    is_fresh = true;
                }
            }
        }
        if(!is_fresh){
            return 0;
        }

        for(int i=0;i<rows;i++){
            for(int j=0;j<cols;j++){
                if(grid[i][j]==2){
                    q.push({i,j,0});
                    vis[i][j] = 1;
                }
            }
        }
        
        while(!q.empty()){
            auto t = q.front();
            int r = get<0>(t),c = get<1>(t);
            tm = get<2>(t);
            int dr[] = {0,1,0,-1},dc[] = {1,0,-1,0};

            for(int i=0;i<4;i++){
                if(r+dr[i]>=0 && r+dr[i]<rows && c+dc[i]>=0 && c+dc[i]<cols && !vis[r+dr[i]][c+dc[i]] && grid[r+dr[i]][c+dc[i]] == 1){
                    vis[r+dr[i]][c+dc[i]] = 1;
                    q.push({r+dr[i],c+dc[i],tm+1});
                } 
            }
            q.pop();
        }

        for(int i=0;i<rows;i++){
            for(int j=0;j<cols;j++){
                if(grid[i][j]==1 && !vis[i][j]){
                    return -1;
                }
            }
        }

        return tm;
    }
};